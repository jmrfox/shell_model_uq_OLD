
SHell Model Uncertainty Quantification suite (SHMUQ)
by Jordan Fox, 2020

###
Purpose:
###

Given a phenomenological/empirical shell model interaction for a BIGSTICK calculation
and a data set, this suite facilitates sensitivity analysis of parameters and
uncertainty quantification of observables: either expectation values of operators
or trasitions strengths computed using genstrength or GTstrength.

Reference:
Phys. Rev. C 101, 054308

###
Requirements:
###

1. BIGSTICK, as serial (bigstick.x) and openmp (bigstick-openmp.x) programs seperately
2. Single particle space file (e.g. sd.sps)
3. Interaction file (e.g. usdb.int)
4. A data set
    The data should be a csv file with features = A,Z,N,2t,2j,n,energy,error
5. Programs anamil and standardorderint
6. One-body operator matrix elements (for transition or expectation value)
7. Programs genstrength.x and/or GTstrength.x for computing strengths from density matrices

###
Usage:
###

Sensitivity analysis: computing the approximate Hessian, milcoms:
0) Build anamil.x, standardorder.x, and use standardorderint to create two files:
    1. a standard-ordered interaction file (usdb.int -> usdb_ordered.int)
    2. convert this ordered interaction to a vector (usdb_ordered.int -> usdb_ordered.vec)
0.5) For a calculation with no experimental data, use res2data.py to convert a .res to data
1) use exp_values.py to compute expectation values of one- and two-body operators in hamiltonian
2) use approx_hessian.py to compute approximate hessian, covariance, milcoms.

NOTE: in these scripts "milcoms" (Most Important Linear Combinations of Matrix Elements)
are equivalent to what are called PCA-parameters in our paper.
The code hessian_approx.py with output a file of milcoms called milcoms_approx.dat,
however this should be copied to a file with the .milcom extension (e.g. approx.milcom)
which is expected by the anamil code.


Uncertainty Quantification: computing observable distributions
0) Use anamil to generate the interaction in the milcoms-space (i.e. usdbmil.vec)
    this filename can be set in sa_mod.py, along with the milcoms filename
    (this of course depends on the milcoms file generated in step 2 of SA)
1) Add the transition data to trans_mod.py
2) use b_samples.py, b_samples_GT.py, or x_samples to compute observables
    use b_samples for non-charge changing, b_samples_GT for GT, and x_samples for expectation values
3) use compute_stats or compute_stats_x to get statistics and make histograms

###
Files in this package:
###

anamil.v#.f90               CWJ's code for computing milcoms, etc.
standardorderint.v#.f90     CWJ's interaction utility code

approx_hessian_mod.py       module for computing approximate hessian, etc.
approx_hessian.py           python script for computing approximate hessian
b_samples_GT.py             script for computing samples (distributions) of a Gamow-Teller transition
b_samples.py                script for computing samples (distributions) of non-charge-changing transitions like E2, M1
compute_stats.py            computes statistics from a .pkl file containing B-value samples
compute_stats_x.py          same as above but for expectation values

Data/ne20data.csv           generated data from Neon-20 calculation using USDB
Data/sd.sps                 sd single particle space
Data/usdb.int               USDB matrix elements
Data/usdb_data.csv          sample experimental data set (used for fitting USDB)
Data/usdb_sorted.int        USDB matrix elements sorted using standardorderint

exp_values.py               script for computing expectation values of one- and two-body operators in hamiltonian
hocalc_mod.py               module to keep HO properties
milcoms_distance.py         script for computing distance between two milcoms files (distance metric subject to change!)
phenom_input.py             script for generating an input file for bigstick
res2data.py                 script for transforming a .res file from bigstick into a data set which can be read in to exp_values.py
sa_mod.py                   module for sensitivity analysis
trans_mod.py                module for transitions - NOTE: this module contains a dictionary structure that holds transition information! The user must add necessary transition info to this dict!
x_samples.py                script for computing samples (distributions) of expectation values of one-body operators

###
Generated files:
###

exp_values.dat                      contains expectation values of one- and two- body operators in hamiltonian for each state in data set
approx_hessian.dat                  hessian matrix
approx_milcoms.dat                  eigenvalues and eigenvectors of hessian (PCA-parameters)
<case-name>_<operator_name>.pkl     (e.g. Ne20_GTsd.pkl) a pkl file containing the dictionary of samples generated by b_samples/b_samples_GT/x_samples
Z??N??_Jz?.*                        bigstick outputs
<interaction_name>_o??.*            individual operators of the interaction, used for expectation values (e.g. usdb_o33.vec is the 33rd operator in usdb)

